name: Build

on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}

jobs:
  build:
    name: Compile, Test, fmt, Clippy, codecov
    runs-on: ubuntu-latest
    container:
      image: xd009642/tarpaulin:develop-nightly
      options: --security-opt seccomp=unconfined
    services:
      postgres:
        image: richardgarbi/postgres-docker-more-connections:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 15s
          --health-timeout 5s
          --health-retries 10
    env:
      SQLX_VERSION: 0.5.11
      SQLX_FEATURES: all
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/toolchain@v1
        with:
          components: clippy
          toolchain: stable
          override: true
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install sqlx-cli
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: >
            sqlx-cli
            --force
            --version=${{ env.SQLX_VERSION }}

      - name: Migrate database
        run: |
          sudo apt-get install libpq-dev -y
          SKIP_DOCKER=true ./scripts/init_db.sh

      - name: Check sqlx-data.json is up-to-date
        run: |
          cargo sqlx prepare --check -- --bin newsletter-signup-service

      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings
